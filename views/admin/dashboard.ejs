<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        body {
            background-color: #121212;
            color: #ffffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            display: flex;
        }

        .dashboard-container {
            margin-left: 100px;
            padding: 20px;
            width: calc(100% - 250px);
        }

        .top-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .page-title {
            font-size: 28px;
            font-weight: 600;
        }

        .filter-controls {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .filter-controls select {
            padding: 8px;
            border-radius: 8px;
            background: #2c2c2c;
            color: #ffffff;
            border: none;
            font-size: 14px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .stats-card {
            background: #1a1a1a;
            border-radius: 12px;
            padding: 15px;
            text-align: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }

        .stats-card h3 {
            font-size: 14px;
            color: #a1a1a1;
            margin-bottom: 10px;
        }

        .stats-card p {
            font-size: 20px;
            font-weight: 600;
            color: #ffffff;
            margin: 0;
        }

        .charts-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .chart-card {
            background: #1a1a1a;
            border-radius: 12px;
            padding: 15px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            transition: transform 0.2s ease;
        }

        .chart-card:hover {
            transform: translateY(-3px);
        }

        .chart-container {
            height: 300px !important;
            width: 100%;
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .chart-title {
            font-size: 16px;
            font-weight: 600;
            margin: 0;
            color: #ffffff;
        }

        .chart-subtitle {
            font-size: 14px;
            color: #a1a1a1;
            margin: 0;
        }

        .chart-legend {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
            justify-content: center;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 12px;
            color: #a1a1a1;
        }

        .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 3px;
        }

        @media (max-width: 1200px) {
            .charts-container {
                grid-template-columns: repeat(2, 1fr);
            }
            .chart-container {
                height: 280px !important;
            }
        }

        @media (max-width: 992px) {
            .dashboard-container {
                margin-left: 200px;
                width: calc(100% - 200px);
            }
            .charts-container {
                grid-template-columns: 1fr;
            }
            .chart-container {
                height: 250px !important;
            }
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 576px) {
            .dashboard-container {
                margin-left: 0;
                width: 100%;
            }
            .charts-container {
                grid-template-columns: 1fr;
            }
            .chart-container {
                height: 200px !important;
            }
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <%- include("../partials/admin/sidebar", { activePage: 'dashboard' }) %>

    <!-- Main Content -->
    <div class="dashboard-container">
        <div class="top-bar">
            <h1 class="page-title">Sales Dashboard</h1>
            <div class="filter-controls">
                <div>
                    <span class="filter-label">Time Period:</span>
                    <select id="timeFilter" onchange="updateCharts()">
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly" selected>Monthly</option>
                        <option value="yearly">Yearly</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="stats-grid">
            <div class="stats-card">
                <h3>Today's Sales</h3>
                <p>₹<%= todaySales.toLocaleString('en-IN') %></p>
            </div>
            <div class="stats-card">
                <h3>Yesterday's Sales</h3>
                <p>₹<%= yesterdaySales.toLocaleString('en-IN') %></p>
            </div>
            <div class="stats-card">
                <h3>Monthly Sales</h3>
                <p>₹<%= monthlySales.toLocaleString('en-IN') %></p>
            </div>
            <div class="stats-card">
                <h3>Yearly Sales</h3>
                <p>₹<%= yearlySales.toLocaleString('en-IN') %></p>
            </div>
        </div>

        <!-- Sales Overview Chart -->
        <div class="chart-card">
            <div class="chart-header">
                <div>
                    <h2 class="chart-title">Sales Overview</h2>
                    <p class="chart-subtitle">Revenue performance</p>
                </div>
                <div id="sales-total"></div>
            </div>
            <div class="chart-container">
                <canvas id="salesChart"></canvas>
            </div>
        </div>

        <!-- 2x2 Charts Grid -->
        <div class="charts-container">
            <div class="chart-card">
                <div class="chart-header">
                    <div>
                        <h2 class="chart-title">Best Selling Products</h2>
                        <p class="chart-subtitle">Top 10 products by units sold</p>
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="productsChart"></canvas>
                </div>
            </div>
            <div class="chart-card">
                <div class="chart-header">
                    <div>
                        <h2 class="chart-title">Best Selling Categories</h2>
                        <p class="chart-subtitle">Revenue distribution by category</p>
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="categoriesChart"></canvas>
                </div>
                <div class="chart-legend" id="categories-legend"></div>
            </div>
            <div class="chart-card">
                <div class="chart-header">
                    <div>
                        <h2 class="chart-title">Best Selling Brands</h2>
                        <p class="chart-subtitle">Revenue distribution by brand</p>
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="brandsChart"></canvas>
                </div>
                <div class="chart-legend" id="brands-legend"></div>
            </div>
            <div class="chart-card">
                <div class="chart-header">
                    <div>
                        <h2 class="chart-title">Order Status Distribution</h2>
                        <p class="chart-subtitle">Current order statuses</p>
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="statusChart"></canvas>
                </div>
                <div class="chart-legend" id="status-legend"></div>
            </div>
        </div>
    </div>

    <script>
        let charts = {
            sales: null,
            products: null,
            categories: null,
            brands: null,
            status: null
        };

        const chartColors = [
            '#4361ee', '#3a0ca3', '#7209b7', '#f72585', '#4cc9f0',
            '#ff9e00', '#38b000', '#9d4edd', '#d90429', '#0077b6'
        ];

        const statusColors = {
            'Pending': '#ffc107',
            'Failed': '#dc3545',
            'Processing': '#17a2b8',
            'Shipped': '#007bff',
            'Out for Delivery': '#6f42c1',
            'Delivered': '#28a745',
            'Cancelled': '#ff6b6b',
            'Return Request': '#fd7e14',
            'Returned': '#6610f2',
            'Return Rejected': '#e83e8c'
        };

        // Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR',
                maximumFractionDigits: 2,
            }).format(amount);
        }

        // Format number
        const formatNumber = (value) => {
            return new Intl.NumberFormat('en-IN').format(value);
        };

        function showError(message) {
            const errorContainer = document.createElement('div');
            errorContainer.className = 'alert alert-danger';
            errorContainer.textContent = message;
            document.querySelector('.dashboard-container').prepend(errorContainer);
            setTimeout(() => errorContainer.remove(), 5000);
        }

        function clearError() {
            const errorContainer = document.querySelector('.alert.alert-danger');
            if (errorContainer) errorContainer.remove();
        }

        function updateSalesTotal(data) {
            const totalElement = document.getElementById('sales-total');
            if (!totalElement) return;

            const total = Array.isArray(data) ? data.reduce((acc, val) => acc + (val || 0), 0) : 0;
            totalElement.innerHTML = `
                <div style="text-align: right">
                    <div style="font-size: 14px; color: #a1a1a1;">Total Sales</div>
                    <div style="font-size: 20px; font-weight: 600; color: #4361ee">
                        ${formatCurrency(total)}
                    </div>
                </div>
            `;
        }

        function generateLegend(chartId, labels, colors) {
            const legendEl = document.getElementById(`${chartId}-legend`);
            if (!legendEl) return;

            legendEl.innerHTML = '';
            labels.forEach((label, index) => {
                const item = document.createElement('div');
                item.className = 'legend-item';

                const colorBox = document.createElement('span');
                colorBox.className = 'legend-color';
                colorBox.style.backgroundColor = colors[index % colors.length];

                const text = document.createElement('span');
                text.textContent = label;

                item.appendChild(colorBox);
                item.appendChild(text);
                legendEl.appendChild(item);
            });
        }

        function safeDestroy(chart) {
            if (chart && typeof chart.destroy === 'function') chart.destroy();
        }

        function renderCharts(data) {
            console.log(data,"data : ")
            // Defensive checks for data
            if (!data || typeof data !== 'object') {
                console.error('Invalid data format:', data);
                showError('Failed to render charts: Invalid data format');
                return;
            }

            // Default values for expected properties
            const safeData = {
                labels: data.labels || [],
                revenue: Array.isArray(data.revenue) ? data.revenue : [],
                topProducts: Array.isArray(data.topProducts) ? data.topProducts : [],
                topCategories: Array.isArray(data.topCategories) ? data.topCategories : [],
                topBrands: Array.isArray(data.topBrands) ? data.topBrands : [],
                orderStatus: data.orderStatus || { labels: [], data: [] }
            };

            safeDestroy(charts.sales);
            safeDestroy(charts.products);
            safeDestroy(charts.categories);
            safeDestroy(charts.brands);
            safeDestroy(charts.status);

            // Sales Overview Chart
            try {
                const salesCtx = document.getElementById('salesChart');
                if (salesCtx) {
                    updateSalesTotal(safeData.revenue);
                    charts.sales = new Chart(salesCtx, {
                        type: 'line',
                        data: {
                            labels: safeData.labels,
                            datasets: [{
                                label: 'Revenue',
                                data: safeData.revenue,
                                fill: false,
                                borderColor: 'rgba(67, 97, 238, 1)',
                                backgroundColor: 'rgba(67, 97, 238, 0.2)',
                                tension: 0.3,
                                pointRadius: 4,
                                pointBackgroundColor: 'rgba(67, 97, 238, 1)',
                                pointBorderColor: '#fff',
                                pointHoverRadius: 6
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: { display: false },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            return formatCurrency(context.raw || 0);
                                        }
                                    }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    grid: { drawBorder: false, color: 'rgba(255, 255, 255, 0.1)' },
                                    ticks: {
                                        callback: function (value) {
                                            return formatCurrency(value);
                                        }
                                    }
                                },
                                x: {
                                    grid: { display: false }
                                }
                            }
                        }
                    });
                }
            } catch (error) {
                console.error('Error rendering Sales Overview Chart:', error);
                showError('Failed to render Sales Overview Chart');
            }

            // Best Selling Products Chart
            try {
                const productsCtx = document.getElementById('productsChart');
                if (productsCtx) {
                    const labels = safeData.topProducts.map(p => p.productName || 'Unknown').slice(0, 10);
                    const quantities = safeData.topProducts.map(p => p.totalQuantity || 0).slice(0, 10);

                    charts.products = new Chart(productsCtx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Units Sold',
                                data: quantities,
                                backgroundColor: chartColors,
                                borderColor: chartColors,
                                borderWidth: 1,
                                borderRadius: 4
                            }]
                        },
                        options: {
                            indexAxis: 'y',
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: { display: false },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            return `Units Sold: ${formatNumber(context.raw || 0)}`;
                                        }
                                    }
                                }
                            },
                            scales: {
                                x: {
                                    beginAtZero: true,
                                    grid: { color: 'rgba(255, 255, 255, 0.1)' },
                                    ticks: {
                                        callback: function (value) {
                                            return formatNumber(value);
                                        },
                                        font: { size: 12 }
                                    }
                                },
                                y: {
                                    grid: { display: false },
                                    ticks: { font: { size: 12 } }
                                }
                            }
                        }
                    });
                }
            } catch (error) {
                console.error('Error rendering Best Selling Products Chart:', error);
                showError('Failed to render Best Selling Products Chart');
            }

            // Categories Chart
            try {
                const categoriesCtx = document.getElementById('categoriesChart');
                if (categoriesCtx) {
                    const labels = safeData.topCategories.map(c => c.name || 'Unknown').slice(0, 10);
                    const quantities = safeData.topCategories.map(c => c.totalQuantity || 0).slice(0, 10);

                    charts.categories = new Chart(categoriesCtx, {
                        type: 'pie',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Category Sales',
                                data: quantities,
                                backgroundColor: chartColors.slice(0, labels.length),
                                borderColor: '#ffffff',
                                borderWidth: 2
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: { display: false },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            const value = context.raw || 0;
                                            const total = context.dataset.data.reduce((a, b) => a + (b || 0), 0);
                                            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                            return `${context.label}: ${formatNumber(value)} (${percentage}%)`;
                                        }
                                    }
                                }
                            }
                        }
                    });
                    generateLegend('categories', labels, chartColors);
                }
            } catch (error) {
                console.error('Error rendering Categories Chart:', error);
                showError('Failed to render Categories Chart');
            }

            // Brands Chart
            try {
                const brandsCtx = document.getElementById('brandsChart');
                if (brandsCtx) {
                    const labels = safeData.topBrands.map(b => b.BrandName || 'Unknown').slice(0, 10);
                    const quantities = safeData.topBrands.map(b => b.totalQuantity || 0).slice(0, 10);

                    charts.brands = new Chart(brandsCtx, {
                        type: 'doughnut',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Brand Sales',
                                data: quantities,
                                backgroundColor: chartColors.slice(0, labels.length),
                                borderColor: '#ffffff',
                                borderWidth: 2
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            cutout: '65%',
                            plugins: {
                                legend: { display: false },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            const value = context.raw || 0;
                                            const total = context.dataset.data.reduce((a, b) => a + (b || 0), 0);
                                            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                            return `${context.label}: ${formatNumber(value)} (${percentage}%)`;
                                        }
                                    }
                                }
                            }
                        }
                    });
                    generateLegend('brands', labels, chartColors);
                }
            } catch (error) {
                console.error('Error rendering Brands Chart:', error);
                showError('Failed to render Brands Chart');
            }

            // Order Status Chart (Matching Best Selling Categories)
            try {
                const statusCtx = document.getElementById('statusChart');
                if (statusCtx) {
                    const allStatuses = ['Pending', 'Failed', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered', 'Cancelled', 'Return Request', 'Returned', 'Return Rejected'];
                    const statusLabels = Array.isArray(safeData.orderStatus.labels) ? safeData.orderStatus.labels : [];
                    const statusData = Array.isArray(safeData.orderStatus.data) ? safeData.orderStatus.data : [];
                    const statusMap = {};
                    statusLabels.forEach((label, index) => {
                        if (typeof label === 'string' && typeof statusData[index] === 'number') {
                            statusMap[label] = statusData[index];
                        }
                    });

                    const quantities = allStatuses.map(status => statusMap[status] || 0);
                    const colors = allStatuses.map(status => statusColors[status] || '#6c757d');

                    charts.status = new Chart(statusCtx, {
                        type: 'pie',
                        data: {
                            labels: allStatuses,
                            datasets: [{
                                label: 'Orders',
                                data: quantities,
                                backgroundColor: colors,
                                borderColor: '#ffffff',
                                borderWidth: 2
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: { display: false },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            const value = context.raw || 0;
                                            const total = context.dataset.data.reduce((a, b) => a + (b || 0), 0);
                                            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                            return `${context.label}: ${formatNumber(value)} (${percentage}%)`;
                                        }
                                    }
                                }
                            }
                        }
                    });
                    generateLegend('status', allStatuses, colors);
                }
            } catch (error) {
                console.error('Error rendering Order Status Chart:', error);
                showError('Failed to render Order Status Chart');
            }
        }

        async function updateCharts() {
            const timeFilter = document.getElementById('timeFilter').value;
            clearError();

            try {
                const response = await fetch(`/admin/dashboard/data?filter=${timeFilter}`, {
                    credentials: 'include'
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP error! Status: ${response.status}, Message: ${errorText}`);
                }

                const data = await response.json();
                console.log('Fetched data:', data);

                if (data.error) {
                    throw new Error(`Server error: ${data.error}`);
                }

                renderCharts(data);
            } catch (error) {
                console.error('Error updating charts:', error.message, error.stack);
                showError(`Failed to load dashboard data: ${error.message}`);
                Object.values(charts).forEach(chart => safeDestroy(chart));
            }
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            updateCharts();
        });
    </script>
</body>
</html>