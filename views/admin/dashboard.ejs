<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
  * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: #1a1a2e; /* Dark navy background */
  min-height: 100vh;
  color: #e0e0e0; /* Light text for contrast */
}

.dashboard-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 20px;
}

.header {
  background: rgba(40, 40, 60, 0.95); /* Darker card background */
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 30px;
  margin-bottom: 30px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.header h1 {
  font-size: 2.5rem;
  font-weight: 700;
  background: linear-gradient(135deg, #667eea, #764ba2);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin-bottom: 10px;
}

.header p {
  color: #a0a0a0; /* Lighter gray for secondary text */
  font-size: 1.1rem;
}

.controls {
  background: rgba(40, 40, 60, 0.95); /* Darker control panel */
  backdrop-filter: blur(10px);
  border-radius: 15px;
  padding: 20px;
  margin-bottom: 30px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  display: flex;
  gap: 20px;
  align-items: center;
  flex-wrap: wrap;
}

.filter-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.filter-group label {
  font-weight: 600;
  color: #c0c0c0; /* Light gray for labels */
  font-size: 0.9rem;
}

select, input[type="date"], button {
  padding: 12px 16px;
  border: 2px solid #3a3a4a; /* Darker border */
  border-radius: 10px;
  font-size: 1rem;
  transition: all 0.3s ease;
  background: #2a2a3e; /* Dark input background */
  color: #e0e0e0; /* Light text */
}

select:focus, input[type="date"]:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.3);
}

button {
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
  border: none;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.3s ease;
}

button:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}

.charts-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 30px;
  margin-bottom: 30px;
}

.chart-card {
  background: rgba(40, 40, 60, 0.95); /* Darker chart card */
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 25px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  border: 1px solid rgba(255, 255, 255, 0.1);
  transition: transform 0.3s ease;
}

.chart-card:hover {
  transform: translateY(-5px);
}

.chart-card h2 {
  font-size: 1.4rem;
  margin-bottom: 20px;
  color: #e0e0e0; /* Light text for chart titles */
  text-align: center;
  font-weight: 600;
}

.main-chart {
  grid-column: 1 / -1;
  min-height: 400px;
}

.chart-container {
  position: relative;
  height: 300px;
  margin-bottom: 10px;
}

.main-chart .chart-container {
  height: 400px;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.stat-card {
  background: rgba(40, 40, 60, 0.95); /* Darker stat card */
  backdrop-filter: blur(10px);
  border-radius: 15px;
  padding: 20px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  text-align: center;
  transition: transform 0.3s ease;
}

.stat-card:hover {
  transform: translateY(-3px);
}

.stat-number {
  font-size: 2.5rem;
  font-weight: 700;
  background: linear-gradient(135deg, #667eea, #764ba2);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin-bottom: 5px;
}

.stat-label {
  color: #a0a0a0; /* Lighter gray for stat labels */
  font-size: 1rem;
  font-weight: 500;
}

.error {
  color: #e74c3c;
  background: rgba(231, 76, 60, 0.2); /* Slightly adjusted for dark theme */
  padding: 15px;
  border-radius: 10px;
  margin-bottom: 20px;
  text-align: center;
}

.loading {
  text-align: center;
  padding: 40px;
  color: #a0a0a0; /* Lighter gray for loading text */
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #3a3a4a; /* Darker spinner border */
  border-top: 4px solid #667eea;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 20px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@media (max-width: 768px) {
  .charts-grid {
    grid-template-columns: 1fr;
  }
  
  .controls {
    flex-direction: column;
    align-items: stretch;
  }
  
  .header h1 {
    font-size: 2rem;
  }
}

.gradient-bg-1 { background: linear-gradient(135deg, #667eea, #764ba2); }
.gradient-bg-2 { background: linear-gradient(135deg, #f093fb, #f5576c); }
.gradient-bg-3 { background: linear-gradient(135deg, #4facfe, #00f2fe); }
.gradient-bg-4 { background: linear-gradient(135deg, #43e97b, #38f9d7); }
  </style>
</head>
<body>
  <%- include("../partials/admin/sidebar", { activePage: 'dashboard' }) %>
  <div class="dashboard-container">
    <div class="header">
      <h1>Admin Dashboard</h1>
      <p>Comprehensive analytics and insights for your business</p>
    </div>

    <div id="errorContainer"></div>

    <div class="controls">
      <div class="filter-group">
        <label for="timeFilter">Time Range</label>
        <select id="timeFilter" onchange="updateCharts()">
          <option value="daily">Daily</option>
          <option value="weekly">Weekly</option>
          <option value="monthly">Monthly</option>
          <option value="yearly">Yearly</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label for="startDate">Start Date</label>
        <input type="date" id="startDate">
      </div>
      
      <div class="filter-group">
        <label for="endDate">End Date</label>
        <input type="date" id="endDate">
      </div>
      
      <div class="filter-group">
        <label>&nbsp;</label>
        <button onclick="downloadLedger()">Download Ledger</button>
      </div>
    </div>

    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-number" id="totalSales">0</div>
        <div class="stat-label">Total Sales</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" id="totalRevenue">$0</div>
        <div class="stat-label">Total Revenue</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" id="totalProducts">0</div>
        <div class="stat-label">Active Products</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" id="totalOrders">0</div>
        <div class="stat-label">Total Orders</div>
      </div>
    </div>

    <div class="charts-grid">
      <div class="chart-card main-chart">
        <h2>Sales & Revenue Trends</h2>
        <div class="chart-container">
          <canvas id="salesChart"></canvas>
        </div>
      </div>

      <div class="chart-card">
        <h2>Top 10 Products</h2>
        <div class="chart-container">
          <canvas id="productsChart"></canvas>
        </div>
      </div>

      <div class="chart-card">
        <h2>Top 10 Categories</h2>
        <div class="chart-container">
          <canvas id="categoriesChart"></canvas>
        </div>
      </div>

      <div class="chart-card">
        <h2>Top 10 Brands</h2>
        <div class="chart-container">
          <canvas id="brandsChart"></canvas>
        </div>
      </div>
    </div>
  </div>

  <script>
    let charts = {
      sales: null,
      products: null,
      categories: null,
      brands: null
    };

    const colors = {
      primary: ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe', '#43e97b', '#38f9d7', '#fa709a', '#fee140'],
      secondary: ['rgba(102, 126, 234, 0.1)', 'rgba(118, 75, 162, 0.1)', 'rgba(240, 147, 251, 0.1)', 'rgba(245, 87, 108, 0.1)', 'rgba(79, 172, 254, 0.1)', 'rgba(0, 242, 254, 0.1)', 'rgba(67, 233, 123, 0.1)', 'rgba(56, 249, 215, 0.1)', 'rgba(250, 112, 154, 0.1)', 'rgba(254, 225, 64, 0.1)']
    };

    function showLoading(containerId) {
      const container = document.getElementById(containerId);
      if (container) {
        container.innerHTML = '<div class="loading"><div class="spinner"></div>Loading chart data...</div>';
      }
    }

    function showError(message) {
      document.getElementById('errorContainer').innerHTML = `<div class="error">${message}</div>`;
    }

    function clearError() {
      document.getElementById('errorContainer').innerHTML = '';
    }

    function updateStats(data) {
      console.log(data,'data')
      if (data.sales && data.revenue) {
        const totalSales = data.sales.reduce((sum, val) => sum + (val || 0), 0);
        const totalRevenue = data.revenue.reduce((sum, val) => sum + (val || 0), 0);
        
        document.getElementById('totalSales').textContent = totalSales.toLocaleString();
        document.getElementById('totalRevenue').textContent = `$${totalRevenue.toLocaleString()}`;
      }
      
      if (data.topProducts) {
        document.getElementById('totalProducts').textContent = data.topProducts.length;
      }
    }

    function createSalesChart(data) {
      const ctx = document.getElementById('salesChart').getContext('2d');
      if (charts.sales) charts.sales.destroy();

      charts.sales = new Chart(ctx, {
        type: 'line',
        data: {
          labels: data.labels || [],
          datasets: [{
            label: 'Total Sales',
            data: data.sales || [],
            borderColor: colors.primary[0],
            backgroundColor: colors.secondary[0],
            fill: true,
            tension: 0.4,
            borderWidth: 3,
            pointBackgroundColor: colors.primary[0],
            pointBorderColor: '#fff',
            pointBorderWidth: 2,
            pointRadius: 6,
          }, {
            label: 'Revenue ($)',
            data: data.revenue || [],
            borderColor: colors.primary[2],
            backgroundColor: colors.secondary[2],
            fill: true,
            tension: 0.4,
            borderWidth: 3,
            pointBackgroundColor: colors.primary[2],
            pointBorderColor: '#fff',
            pointBorderWidth: 2,
            pointRadius: 6,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: true,
              position: 'top',
              labels: {
                usePointStyle: true,
                padding: 20,
                font: { size: 14, weight: '600' }
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              grid: { color: 'rgba(0,0,0,0.05)' },
              ticks: { font: { size: 12 } }
            },
            x: {
              grid: { color: 'rgba(0,0,0,0.05)' },
              ticks: { font: { size: 12 } }
            }
          },
          interaction: {
            intersect: false,
            mode: 'index'
          }
        }
      });
    }

    function createProductsChart(data) {
      const ctx = document.getElementById('productsChart').getContext('2d');
      if (charts.products) charts.products.destroy();

      const products = data.topProducts || [];
      const labels = products.map(p => p.productName || 'Unknown').slice(0, 10);
      const quantities = products.map(p => p.totalQuantity || 0).slice(0, 10);

      charts.products = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: labels,
          datasets: [{
            data: quantities,
            backgroundColor: colors.primary.slice(0, labels.length),
            borderWidth: 0,
            hoverBorderWidth: 4,
            hoverBorderColor: '#fff'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.parsed || 0;
                  const total = quantities.reduce((sum, val) => sum + val, 0);
                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            }
          },
          cutout: '60%'
        }
      });
    }

    function createCategoriesChart(data) {
      const ctx = document.getElementById('categoriesChart').getContext('2d');
      if (charts.categories) charts.categories.destroy();

      const categories = data.topCategories || [];
      const labels = categories.map(c => c.name || 'Unknown').slice(0, 10);
      const quantities = categories.map(c => c.totalQuantity || 0).slice(0, 10);

      charts.categories = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            data: quantities,
            backgroundColor: colors.primary.slice(0, labels.length),
            borderRadius: 8,
            borderSkipped: false,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false }
          },
          scales: {
            y: {
              beginAtZero: true,
              grid: { color: 'rgba(0,0,0,0.05)' },
              ticks: { font: { size: 10 } }
            },
            x: {
              grid: { display: false },
              ticks: { 
                font: { size: 10 },
                maxRotation: 45
              }
            }
          }
        }
      });
    }

    function createBrandsChart(data) {
      const ctx = document.getElementById('brandsChart').getContext('2d');
      if (charts.brands) charts.brands.destroy();

      const brands = data.topBrands || [];
      const labels = brands.map(b => b.BrandName || 'Unknown').slice(0, 10);
      const quantities = brands.map(b => b.totalQuantity || 0).slice(0, 10);

      charts.brands = new Chart(ctx, {
        type: 'polarArea',
        data: {
          labels: labels,
          datasets: [{
            data: quantities,
            backgroundColor: colors.secondary.slice(0, labels.length),
            borderColor: colors.primary.slice(0, labels.length),
            borderWidth: 2
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            r: {
              beginAtZero: true,
              grid: { color: 'rgba(0,0,0,0.1)' },
              ticks: { display: false }
            }
          }
        }
      });
    }

    async function updateCharts() {
      const timeFilter = document.getElementById('timeFilter').value;
      clearError();
      
      // Show loading state
      ['salesChart', 'productsChart', 'categoriesChart', 'brandsChart'].forEach(id => {
        showLoading(id + 'Container');
      });

      try {
        const response = await fetch(`/admin/dashboard/data?filter=${timeFilter}`, {
          credentials: 'include'
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        console.log('Fetched data:', data);

        if (data.error) {
          throw new Error(`Server error: ${data.error}`);
        }

        // Update all charts
        createSalesChart(data);
        createProductsChart(data);
        createCategoriesChart(data);
        createBrandsChart(data);
        updateStats(data);

      } catch (error) {
        console.error('Error updating charts:', error);
        showError(`Failed to load dashboard data: ${error.message}`);
        
        // Show empty state for all charts
        Object.values(charts).forEach(chart => {
          if (chart) chart.destroy();
        });
      }
    }

    async function downloadLedger() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      
      if (!startDate || !endDate) {
        showError('Please select a valid date range for the ledger download');
        return;
      }
      
      if (new Date(startDate) > new Date(endDate)) {
        showError('Start date cannot be later than end date');
        return;
      }
      
      try {
        window.location.href = `/admin/dashboard/ledger?startDate=${startDate}&endDate=${endDate}`;
        clearError();
      } catch (error) {
        showError('Failed to download ledger');
      }
    }

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
      updateCharts();
      
      // Set default dates (last 30 days)
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - 30);
      
      document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
      document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
    });
  </script>
</body>
</html>