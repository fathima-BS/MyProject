<%- include("../../views/partials/user/header") %>

<div class="profile-container">
    <!-- Include the sidebar partial with active state -->
    <div class="sidebar-container">
        <%- include('../../views/partials/user/sidebar', {active: 'personal-info'}) %>
    </div>
    
    <div class="profile-content">
        <div class="page-header">
            <a href="/userProfile" class="back-button">
                <i class="fa fa-arrow-left"></i> Back to Profile 
            </a>
            <h1>Edit Profile</h1>
        </div>
        
        <form class="edit-profile-form" action="/edit-profile" method="POST" enctype="multipart/form-data">
            <div class="form-section">
                <h2>Profile Image</h2>
                <div class="profile-image-upload">
                    <div class="current-image-container">
                        <div class="current-image">
                            <% if (user.profileImage) { %>
                                <img src="<%= user.profileImage %>" alt="Profile Image" class="profile-img">
                            <% } else { %>
                                <div class="profile-placeholder">
                                    <span><%= user.username.charAt(0) %></span>
                                </div>
                            <% } %>
                        </div>
                    </div>
                    
                    <div class="upload-controls">
                        <label for="profile-image" class="upload-btn">
                            <i class="fa fa-upload"></i> Choose Image
                        </label>
                        <input type="file" id="profile-image" name="profileImage" accept="image/*" class="hidden-input">
                        <p class="upload-info">Maximum file size: 5MB. Formats: JPG, PNG</p>
                        
                        <!-- Image preview with crop functionality -->
                        <div class="image-preview-wrapper" id="image-preview-wrapper" style="display: none;">
                            <div class="crop-container" id="crop-container">
                                <img id="image-to-crop" src="#" alt="Image to crop">
                            </div>
                            <div class="crop-controls">
                                <button type="button" class="crop-btn" id="apply-crop-btn">
                                    <i class="fa fa-crop"></i> Crop Image
                                </button>
                                <button type="button" class="cancel-crop-btn" id="cancel-crop-btn">
                                    <i class="fa fa-times"></i> Cancel
                                </button>
                            </div>
                        </div>
                        
                        <!-- Hidden input to store cropped image data -->
                        <input type="hidden" id="cropped-image-data" name="croppedImageData">
                    </div>
                </div>
            </div>
            
            <div class="form-section">
                <h2>Personal Information</h2>
                <div class="form-group">
                    <label for="fullName">Full Name</label>
                    <input type="text" id="fullName" name="fullName" value="<%= user.username %>" class="form-control" required>
                </div>
                
                <div class="form-group">
                    <label for="birthdate">Date of Birth</label>
                    <% 
                        // Format dateOfBirth to YYYY-MM-DD for the input field
                        let formattedDateOfBirth = '';
                        if (user.dateOfBirth) {
                            const date = new Date(user.dateOfBirth);
                            formattedDateOfBirth = date.toISOString().split('T')[0];
                        }
                    %>
                    <input type="date" id="birthdate" name="birthdate" value="<%= formattedDateOfBirth %>" class="form-control">
                </div>
            </div>
            
            <div class="form-section">
                <h2>Email Address</h2>
                <% if (user.googleId) { %>
                    <div class="google-login-notice">
                        <i class="fa fa-info-circle"></i>
                        <p>Your account is linked to Google. Email changes must be made through your Google account.</p>
                    </div>
                    <div class="form-group">
                        <label for="email">Email Address</label>
                        <input type="email" id="email" name="email" value="<%= user.email %>" class="form-control" disabled>
                        <!-- Hidden input to ensure email is sent -->
                        <input type="hidden" name="email" value="<%= user.email %>">
                    </div>
                <% } else { %>
                    <div class="form-group">
                        <label for="email">Email Address</label>
                        <input type="email" id="email" name="email" value="<%= user.email %>" class="form-control" required>
                        <p class="form-note">
                            <i class="fa fa-exclamation-triangle"></i>
                            Note: Changing your email will require verification via OTP sent to your new email address.
                        </p>
                    </div>
                    <!-- Verify Email Button (hidden by default) -->
                    <button type="button" id="verify-email-btn" class="verify-email-btn" style="display: none;">
                        Verify Email
                    </button>
                <% } %>
                <!-- Moved email-message outside the conditional -->
                <p class="email-message" id="email-message"></p>
            </div>
            
            <div class="form-actions">
                <button type="button" class="cancel-btn" onclick="window.location.href='/edit-profile'">Cancel</button>
                <button type="submit" class="save-btn" id="save-btn">Save Changes</button>
            </div>
        </form>
    </div>
</div>

<%- include('../../views/partials/user/footer') %>

<!-- Include SweetAlert -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Include Cropper.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        background-color: #fff;
        color: #333;
    }

    .profile-container {
        display: flex;
        min-height: calc(100vh - 120px); /* Adjust based on header/footer height */
    }

    .sidebar-container {
        flex: 0 0 220px;
    }

    .profile-content {
        flex: 1;
        padding: 2rem;
    }
    
    .page-header {
        display: flex;
        flex-direction: column;
        margin-bottom: 2rem;
    }
    
    .back-button {
        display: inline-flex;
        align-items: center;
        color: #555;
        text-decoration: none;
        font-size: 0.9rem;
        margin-bottom: 1rem;
        width: fit-content;
    }
    
    .back-button i {
        margin-right: 0.5rem;
    }
    
    .back-button:hover {
        color: #1e88e5;
    }
    
    .page-header h1 {
        font-size: 1.8rem;
        margin: 0;
        font-weight: 600;
    }

    .edit-profile-form {
        max-width: 800px;
    }
    
    .form-section {
        margin-bottom: 2.5rem;
        border-bottom: 1px solid #f0f0f0;
        padding-bottom: 1.5rem;
    }
    
    .form-section:last-child {
        border-bottom: none;
    }
    
    .form-section h2 {
        font-size: 1.2rem;
        margin: 0 0 1.5rem 0;
        font-weight: 500;
    }
    
    .profile-image-upload {
        display: flex;
        align-items: flex-start;
        gap: 2rem;
        margin-bottom: 1rem;
    }
    
    .current-image-container {
        flex: 0 0 100px;
    }
    
    .current-image {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        overflow: hidden;
        background-color: #f0f0f0;
        position: relative;
    }
    
    .profile-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }
    
    .profile-placeholder {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2.5rem;
        font-weight: 500;
        color: #666;
        background-color: #e0e0e0;
        position: absolute;
        top: 0;
        left: 0;
    }
    
    .upload-controls {
        flex: 1;
    }
    
    .hidden-input {
        display: none;
    }
    
    .upload-btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background-color: #f0f0f0;
        color: #333;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 0.6rem 1.2rem;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .upload-btn:hover {
        background-color: #e0e0e0;
    }
    
    .upload-info {
        font-size: 0.8rem;
        color: #666;
        margin: 0.5rem 0 0;
    }
    
    .image-preview-wrapper {
        margin-top: 1.5rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        background-color: #f9f9f9;
        max-width: 450px;
    }
    
    .crop-container {
        width: 100%;
        height: 300px;
        position: relative;
        overflow: hidden;
        margin-bottom: 1rem;
        background-color: #000;
    }
    
    #image-to-crop {
        max-width: 100%;
        display: block;
    }
    
    .crop-controls {
        display: flex;
        gap: 1rem;
    }
    
    .crop-btn, .cancel-crop-btn {
        padding: 0.6rem 1rem;
        border-radius: 4px;
        font-size: 0.9rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .crop-btn {
        background-color: #1e88e5;
        color: white;
        border: none;
    }
    
    .crop-btn:hover {
        background-color: #1976d2;
    }
    
    .cancel-crop-btn {
        background-color: #f5f5f5;
        color: #333;
        border: 1px solid #ddd;
    }
    
    .cancel-crop-btn:hover {
        background-color: #e9e9e9;
    }
    
    .form-group {
        margin-bottom: 1.5rem;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        color: #555;
    }
    
    .form-control {
        width: 100%;
        max-width: 400px;
        padding: 0.75rem;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1rem;
    }
    
    .form-control:disabled {
        background-color: #f5f5f5;
        cursor: not-allowed;
    }
    
    .form-note {
        font-size: 0.85rem;
        color: #e67e22;
        margin: 0.5rem 0 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .google-login-notice {
        background-color: #f8f9fa;
        border-left: 3px solid #4285F4;
        padding: 1rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
    }
    
    .google-login-notice i {
        color: #4285F4;
        font-size: 1.1rem;
        margin-top: 0.1rem;
    }
    
    .google-login-notice p {
        margin: 0;
        font-size: 0.9rem;
        color: #555;
    }
    
    .verify-email-btn {
        background-color: #1e88e5;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 0.6rem 1.2rem;
        font-size: 0.9rem;
        cursor: pointer;
        margin-top: 1rem;
    }
    
    .verify-email-btn:hover {
        background-color: #1976d2;
    }
    
    .email-message {
        margin: 0.5rem 0 0;
        font-size: 0.9rem;
    }
    
    .email-message.success {
        color: #28a745;
    }
    
    .email-message.error {
        color: #dc3545;
    }
    
    .form-actions {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }
    
    .cancel-btn {
        background-color: #f5f5f5;
        color: #333;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 0.75rem 1.5rem;
        font-size: 0.9rem;
        cursor: pointer;
    }
    
    .cancel-btn:hover {
        background-color: #e9e9e9;
    }
    
    .save-btn {
        background-color: #1e88e5;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 0.75rem 1.5rem;
        font-size: 0.9rem;
        cursor: pointer;
    }
    
    .save-btn:disabled {
        background-color: #a0c4ff;
        cursor: not-allowed;
    }
    
    .save-btn:hover:not(:disabled) {
        background-color: #1976d2;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .profile-container {
            flex-direction: column;
        }

        .sidebar-container {
            flex: auto;
            width: 100%;
        }
        
        .profile-image-upload {
            flex-direction: column;
            align-items: center;
            text-align: center;
            gap: 1rem;
        }
        
        .upload-controls {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .form-control {
            max-width: 100%;
        }
        
        .form-actions {
            flex-direction: column-reverse;
        }
        
        .form-actions button {
            width: 100%;
        }
        
        .crop-container {
            height: 250px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Image cropping logic
        const fileInput = document.getElementById('profile-image');
        const imagePreviewWrapper = document.getElementById('image-preview-wrapper');
        const cropContainer = document.getElementById('crop-container');
        const imageToCrop = document.getElementById('image-to-crop');
        const applyCropBtn = document.getElementById('apply-crop-btn');
        const cancelCropBtn = document.getElementById('cancel-crop-btn');
        const currentImageDiv = document.querySelector('.current-image');
        const croppedImageData = document.getElementById('cropped-image-data');
        
        let cropper;
        let imageSelected = false; // Track if an image has been selected

        fileInput.addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                if (!file.type.match('image.*')) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid File',
                        text: 'Please select an image file.',
                    });
                    this.value = '';
                    return;
                }
                
                if (file.size > 5 * 1024 * 1024) {
                    Swal.fire({
                        icon: 'error',
                        title: 'File Too Large',
                        text: 'File is too large. Maximum size is 5MB.',
                    });
                    this.value = '';
                    return;
                }
                
                imageSelected = true; // Mark that an image has been selected
                updateButtonState(); // Update button state immediately

                const reader = new FileReader();
                reader.onload = function(e) {
                    imageToCrop.src = e.target.result;
                    imagePreviewWrapper.style.display = 'block';
                    
                    imageToCrop.onload = function() {
                        if (cropper) {
                            cropper.destroy();
                        }
                        
                        cropper = new Cropper(imageToCrop, {
                            aspectRatio: 1,
                            viewMode: 1,
                            guides: true,
                            center: true,
                            background: false,
                            autoCropArea: 0.8,
                            responsive: true
                        });
                    };
                };
                reader.readAsDataURL(file);
            }
        });
        
        applyCropBtn.addEventListener('click', function() {
            if (!cropper) return;
            
            const canvas = cropper.getCroppedCanvas({
                width: 300,
                height: 300,
                imageSmoothingEnabled: true,
                imageSmoothingQuality: 'high',
            });
            
            if (canvas) {
                const croppedImageUrl = canvas.toDataURL('image/jpeg', 0.9);
                
                let profileImg = currentImageDiv.querySelector('.profile-img');
                if (!profileImg) {
                    const placeholder = currentImageDiv.querySelector('.profile-placeholder');
                    if (placeholder) {
                        placeholder.remove();
                    }
                    profileImg = document.createElement('img');
                    profileImg.className = 'profile-img';
                    profileImg.alt = 'Profile Image';
                    currentImageDiv.appendChild(profileImg);
                }
                
                profileImg.src = croppedImageUrl;
                croppedImageData.value = croppedImageUrl;
                
                imagePreviewWrapper.style.display = 'none';
                cropper.destroy();
                cropper = null;
                updateButtonState(); // Update button state after cropping
            }
        });
        
        cancelCropBtn.addEventListener('click', function() {
            imagePreviewWrapper.style.display = 'none';
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
            fileInput.value = '';
            imageSelected = false; // Reset image selection state
            croppedImageData.value = ''; // Clear cropped image data
            updateButtonState(); // Update button state after canceling
        });

        // Email verification logic
        const emailInput = document.getElementById('email');
        const originalEmail = emailInput ? emailInput.value : '';
        const verifyEmailBtn = document.getElementById('verify-email-btn');
        const emailMessage = document.getElementById('email-message');
        const saveBtn = document.getElementById('save-btn');
        const fullNameInput = document.getElementById('fullName');
        const birthdateInput = document.getElementById('birthdate');
        const originalFullName = fullNameInput.value || '';
        const originalBirthdate = birthdateInput.value || '';
        let emailVerified = false;

        // Check if the page was loaded after a successful email verification
        const urlParams = new URLSearchParams(window.location.search);
        const emailVerifiedParam = urlParams.get('emailVerified');
        if (emailVerifiedParam === 'true') {
            emailVerified = true;
            emailMessage.textContent = 'Email verified successfully!';
            emailMessage.className = 'email-message success';
        }

        // Function to check if any field has changed
        function hasChanges() {
            const newEmail = emailInput ? emailInput.value.trim() : originalEmail;
            const newFullName = fullNameInput.value.trim();
            const newBirthdate = birthdateInput.value;
            const hasImageChanged = croppedImageData.value !== '' || imageSelected;
            return (
                newFullName !== originalFullName ||
                newBirthdate !== originalBirthdate ||
                hasImageChanged ||
                (emailInput && newEmail !== originalEmail && emailVerified)
            );
        }

        // Function to update button state
        function updateButtonState() {
            const newEmail = emailInput ? emailInput.value.trim() : originalEmail;
            if (emailInput && emailInput.disabled) {
                // If email is disabled (Google user), no verification needed
                if (verifyEmailBtn) {
                    verifyEmailBtn.style.display = 'none';
                }
                emailMessage.textContent = '';
                saveBtn.disabled = !hasChanges();
            } else if (emailInput && newEmail !== originalEmail && !emailVerified) {
                // Email changed but not verified
                if (verifyEmailBtn) {
                    verifyEmailBtn.style.display = 'inline-block';
                }
                emailMessage.textContent = 'Please verify your new email address.';
                emailMessage.className = 'email-message';
                saveBtn.disabled = true; // Disable until email is verified
            } else {
                // Either email unchanged, or email changed and verified
                if (verifyEmailBtn) {
                    verifyEmailBtn.style.display = 'none';
                }
                if (emailInput && newEmail !== originalEmail && emailVerified) {
                    emailMessage.textContent = 'Email verified successfully!';
                    emailMessage.className = 'email-message success';
                } else {
                    emailMessage.textContent = '';
                }
                saveBtn.disabled = !hasChanges();
            }
        }

        // Monitor email changes
        if (emailInput && !emailInput.disabled) {
            emailInput.addEventListener('input', updateButtonState);
        }

        // Monitor other field changes
        fullNameInput.addEventListener('input', updateButtonState);
        birthdateInput.addEventListener('input', updateButtonState);
        fileInput.addEventListener('change', updateButtonState);

        // Initial button state
        updateButtonState();

        // Handle Verify Email button click
        if (verifyEmailBtn) {
            verifyEmailBtn.addEventListener('click', function() {
                const newEmail = emailInput ? emailInput.value.trim() : '';
                if (!newEmail) {
                    emailMessage.textContent = 'Please enter an email address.';
                    emailMessage.className = 'email-message error';
                    return;
                }
                
                // Send OTP request to backend
                fetch('/send-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email: newEmail }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        emailMessage.textContent = 'OTP sent to your new email address. Redirecting...';
                        emailMessage.className = 'email-message success';
                        // Redirect to OTP verification page
                        setTimeout(() => {
                            window.location.href = `/verify-otp?email=${encodeURIComponent(newEmail)}`;
                        }, 1000);
                    } else {
                        emailMessage.textContent = data.message || 'Failed to send OTP. Please try again.';
                        emailMessage.className = 'email-message error';
                        saveBtn.disabled = !hasChanges();
                    }
                })
                .catch(error => {
                    emailMessage.textContent = 'Error sending OTP. Please try again.';
                    emailMessage.className = 'email-message error';
                    saveBtn.disabled = !hasChanges();
                });
            });
        }

        // Form submission with AJAX
        document.querySelector('.edit-profile-form').addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent default form submission

            const newEmail = emailInput ? emailInput.value.trim() : originalEmail;
            if (emailInput && !emailInput.disabled) {
                // For Google users, email is disabled, so skip verification check
                if (newEmail !== originalEmail && !emailVerified) {
                    emailMessage.textContent = 'Please verify your new email address before saving.';
                    emailMessage.className = 'email-message error';
                    return;
                }
            }

            // Prepare form data
            const formData = new FormData(this);

            // If cropped image data exists, convert it to a Blob and append it as a file
            if (croppedImageData.value) {
                const dataUrl = croppedImageData.value;
                const blob = dataURLtoBlob(dataUrl);
                formData.set('profileImage', blob, 'cropped-image.jpg');
            }

            fetch('/edit-profile', {
                method: 'POST',
                body: formData,
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message || 'Profile updated successfully!',
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        // Redirect to userProfile on success
                        window.location.href = '/userProfile';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to update profile. Please try again.',
                    });
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error updating profile. Please try again.',
                });
            });
        });

        // Function to convert data URL to Blob
        function dataURLtoBlob(dataUrl) {
            const arr = dataUrl.split(',');
            const mime = arr[0].match(/:(.*?);/)[1];
            const bstr = atob(arr[1]);
            let n = bstr.length;
            const u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new Blob([u8arr], { type: mime });
        }
    });
</script>