<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="description" content="ZAPZONE User Addresses">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Addresses - Cario</title>

    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">

    <!-- SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Nunito Sans', sans-serif;
        }

        body {
            background-color: #f5f5f5;
        }

        .profile-container {
            display: flex;
            min-height: calc(100vh - 120px);
        }

        .sidebar-container {
            flex: 0 0 220px;
        }

        .profile-content {
            flex: 1;
            padding: 2rem;
        }

        .container {
            max-width: 768px;
            margin: 0 auto;
            padding: 20px 15px;
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            font-size: 14px;
            color: #333;
            background-color: transparent;
            padding: 0;
        }

        .breadcrumb a {
            color: #333;
            text-decoration: none;
        }

        .breadcrumb-separator {
            margin: 0 8px;
        }

        .address-card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 15px;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            background-color: transparent;
            border-bottom: none;
            padding: 0;
        }

        .card-title {
            font-weight: 600;
            font-size: 16px;
        }

        .card-actions {
            display: flex;
            gap: 8px;
        }

        .btn-action {
            background-color: transparent;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 5px 10px;
            font-size: 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            color: #333;
            text-decoration: none;
        }

        .btn-action:hover {
            text-decoration: none;
            color: #333;
            background-color: #f5f5f5;
        }

        .card-body {
            color: #666;
            font-size: 14px;
            line-height: 1.5;
            padding: 0;
        }

        .address-details {
            margin-bottom: 12px;
        }

        .deliver-btn {
            border: 1px solid #1e88e5;
            background-color: transparent;
            color: #1e88e5;
            border-radius: 3px;
            padding: 6px 12px;
            font-size: 13px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            margin-top: 5px;
            text-decoration: none;
        }

        .deliver-btn.active {
            background-color: #1e88e5;
            color: #fff;
        }

        .deliver-btn:hover {
            text-decoration: none;
            background-color: #f0f7ff;
            color: #1e88e5;
        }

        .add-address-btn {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            padding: 15px;
            border: 1px dashed #aaa;
            border-radius: 8px;
            background-color: transparent;
            color: #333;
            font-size: 14px;
            cursor: pointer;
            margin-top: 20px;
            text-decoration: none;
        }

        .add-address-btn:hover {
            background-color: #f9f9f9;
            text-decoration: none;
            color: #333;
        }

        .add-address-btn span {
            margin-right: 5px;
            font-size: 18px;
        }

        .checkbox-icon {
            width: 18px;
            height: 18px;
            border: 1px solid #1e88e5;
            border-radius: 3px;
            display: inline-block;
            position: relative;
            top: 4px;
            margin-right: 6px;
        }

        .checkbox-icon.checked {
            background-color: #1e88e5;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .checkbox-icon.checked:after {
            content: "âœ“";
            color: white;
            font-size: 12px;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 1000;
            overflow-y: auto;
        }

        .modal.show {
            display: block;
        }

        .modal-dialog {
            position: relative;
            width: 95%;
            max-width: 500px;
            margin: 30px auto;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
        }

        .modal-content {
            padding: 20px;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 15px;
            margin-bottom: 20px;
            border-bottom: 1px solid #eee;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }

        .close-btn {
            background-color: #333;
            color: white;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 14px;
            border: none;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-size: 14px;
            color: #333;
        }

        .form-group label .required {
            color: red;
        }

        .form-control {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            background-color: #f9f9f9;
        }

        .form-row {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
        }

        .form-row .form-group {
            flex: 1;
            margin-bottom: 0;
        }

        .save-btn {
            display: block;
            width: 100%;
            padding: 12px;
            background-color: #1e88e5;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
            margin-top: 20px;
        }

        .save-btn:hover {
            background-color: #1976d2;
        }

        .error-message {
            color: red;
            font-size: 14px;
            margin-top: 4px;
            display: block;
        }

        /* Custom Swal Styles */
        .swal2-popup.custom-swal {
            width: 400px !important;
            padding: 2rem !important;
            border-radius: 12px !important;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1) !important;
        }

        .swal2-title.custom-swal-title {
            font-size: 1.8rem !important;
            font-weight: 600 !important;
            color: #333 !important;
            margin-bottom: 0.5rem !important;
        }

        .swal2-content.custom-swal-content {
            font-size: 1.1rem !important;
            color: #555 !important;
            line-height: 1.4 !important;
        }

        .swal2-icon.swal2-success,
        .swal2-icon.swal2-info,
        .swal2-icon.swal2-question {
            margin-bottom: 1rem !important;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .profile-container {
                flex-direction: column;
            }

            .sidebar-container {
                flex: auto;
                width: 100%;
            }

            .profile-content {
                padding: 1.5rem;
            }

            .card-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .card-actions {
                width: 100%;
                justify-content: flex-start;
            }

            .btn-action {
                flex: 1;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <%- include("../partials/user/header") %>

    <div class="profile-container">
        <!-- Sidebar -->
        <div class="sidebar-container">
            <%- include('../../views/partials/user/sidebar', {active: 'addresses'}) %>
        </div>

        <div class="profile-content">
            <div class="container">
                <div class="breadcrumb">
                    <a href="/">Home</a>
                    <span class="breadcrumb-separator">></span>
                    <a href="/userProfile">My Account</a>
                    <span class="breadcrumb-separator">></span>
                    <span>My Address</span>
                </div>

                <!-- Addresses Container -->
                <% if (addresses && addresses.address && addresses.address.length > 0) { %>
                    <!-- Address Items -->
                    <% addresses.address.forEach((addr, index) => { %>
                        <div class="address-card">
                            <div class="card-header">
                                <div class="card-title"><%= addr.name %> (<%= addr.addressType %>)</div>
                                <div class="card-actions">
                                    <a href="#" class="btn-action edit-address" data-id="<%= addr._id %>" data-address='<%= JSON.stringify(addr) %>'>
                                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: 4px;">
                                            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                            <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                        </svg>
                                        Edit
                                    </a>
                                    <% if (addresses.address.length > 0) { %>
                                        <a href="#" class="btn-action delete-address" data-id="<%= addr._id %>">
                                            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: 4px;">
                                                <polyline points="3 6 5 6 21 6"></polyline>
                                                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                            </svg>
                                            Remove
                                        </a>
                                    <% } %>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="address-details">
                                    <p><strong>Name:</strong> <%= addr.name %></p>
                                    <p><strong>Phone:</strong> <%= addr.phone %></p>
                                    <% if (addr.altPhone) { %>
                                        <p><strong>Alternate Phone:</strong> <%= addr.altPhone %></p>
                                    <% } %>
                                    <p><strong>Address:</strong> <%= addr.landMark %>, <%= addr.city %>, <%= addr.State %> - <%= addr.pincode %></p>
                                    <p><strong>Type:</strong> <%= addr.addressType %></p>
                                </div>
                                <a href="#" class="deliver-btn <%= index === 0 ? 'active' : '' %>" data-id="<%= addr._id %>">
                                    <span class="checkbox-icon <%= index === 0 ? 'checked' : '' %>"></span>
                                    Deliver Here
                                </a>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <!-- No Addresses Message -->
                    <div class="address-card" style="text-align: center; padding: 40px 20px;">
                        <p style="margin-bottom: 20px; color: #666;">You haven't added any addresses yet.</p>
                    </div>
                <% } %>

                <!-- Add New Address Button -->
                <a style="background-color: #1e88e5;color: #f0f7ff;" class="add-address-btn" id="openAddressModal">
                    <span >+</span> Add new address
                </a>
            </div>
        </div>
    </div>

    <!-- Add Address Modal -->
    <div class="modal" id="addressModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Address</h5>
                    <button type="button" class="close-btn" id="closeAddressModal">âœ•</button>
                </div>
                <form id="addAddressForm">
                    <div class="form-group">
                        <label for="addAddressType">Address Type <span class="required">*</span></label>
                        <select class="form-control" id="addAddressType" name="addressType">
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                            <option value="Other">Other</option>
                        </select>
                        <span id="addAddressTypeError" class="error-message"></span>
                    </div>
                    <div class="form-group">
                        <label for="addFullName">Full Name <span class="required">*</span></label>
                        <input type="text" class="form-control" id="addFullName" name="name" placeholder="Enter full name">
                        <span id="addFullNameError" class="error-message"></span>
                    </div>
                    <div class="form-group">
                        <label for="addMobileNo">Mobile No. <span class="required">*</span></label>
                        <input type="tel" class="form-control" id="addMobileNo" name="phone" placeholder="Enter mobile number">
                        <span id="addMobileNoError" class="error-message"></span>
                    </div>
                    <div class="form-group">
                        <label for="addAltPhone">Alternate Phone</label>
                        <input type="tel" class="form-control" id="addAltPhone" name="altPhone" placeholder="Enter alternate phone (optional)">
                        <span id="addAltPhoneError" class="error-message"></span>
                    </div>
                    <div class="form-group">
                        <label for="addLandMark">Landmark <span class="required">*</span></label>
                        <input type="text" class="form-control" id="addLandMark" name="landMark" placeholder="Enter landmark">
                        <span id="addLandMarkError" class="error-message"></span>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="addCity">City <span class="required">*</span></label>
                            <input type="text" class="form-control" id="addCity" name="city" placeholder="Enter city">
                            <span id="addCityError" class="error-message"></span>
                        </div>
                        <div class="form-group">
                            <label for="addPincode">Pincode <span class="required">*</span></label>
                            <input type="text" class="form-control" id="addPincode" name="pincode" placeholder="Enter pincode">
                            <span id="addPincodeError" class="error-message"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="addState">State <span class="required">*</span></label>
                        <input type="text" class="form-control" id="addState" name="State" placeholder="Enter state">
                        <span id="addStateError" class="error-message"></span>
                    </div>
                    <button type="submit" class="save-btn">Save</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Address Modal -->
    <div class="modal" id="editAddressModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Address</h5>
                    <button type="button" class="close-btn" id="closeEditAddressModal">âœ•</button>
                </div>
                <form id="editAddressForm">
                    <input type="hidden" id="editAddressId" name="addressId">
                    <div class="form-group">
                        <label for="editAddressType">Address Type <span class="required">*</span></label>
                        <select class="form-control" id="editAddressType" name="addressType">
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                            <option value="Other">Other</option>
                        </select>
                        <span id="editAddressTypeError" class="error-message"></span>
                    </div>
                    <div class="form-group">
                        <label for="editFullName">Full Name <span class="required">*</span></label>
                        <input type="text" class="form-control" id="editFullName" name="name" placeholder="Enter full name">
                        <span id="editFullNameError" class="error-message"></span>
                    </div>
                    <div class="form-group">
                        <label for="editMobileNo">Mobile No. <span class="required">*</span></label>
                        <input type="tel" class="form-control" id="editMobileNo" name="phone" placeholder="Enter mobile number">
                        <span id="editMobileNoError" class="error-message"></span>
                    </div>
                    <div class="form-group">
                        <label for="editAltPhone">Alternate Phone</label>
                        <input type="tel" class="form-control" id="editAltPhone" name="altPhone" placeholder="Enter alternate phone (optional)">
                        <span id="editAltPhoneError" class="error-message"></span>
                    </div>
                    <div class="form-group">
                        <label for="editLandMark">Landmark <span class="required">*</span></label>
                        <input type="text" class="form-control" id="editLandMark" name="landMark" placeholder="Enter landmark">
                        <span id="editLandMarkError" class="error-message"></span>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="editCity">City <span class="required">*</span></label>
                            <input type="text" class="form-control" id="editCity" name="city" placeholder="Enter city">
                            <span id="editCityError" class="error-message"></span>
                        </div>
                        <div class="form-group">
                            <label for="editPincode">Pincode <span class="required">*</span></label>
                            <input type="text" class="form-control" id="editPincode" name="pincode" placeholder="Enter pincode">
                            <span id="editPincodeError" class="error-message"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="editState">State <span class="required">*</span></label>
                        <input type="text" class="form-control" id="editState" name="State" placeholder="Enter state">
                        <span id="editStateError" class="error-message"></span>
                    </div>
                    <button type="submit" class="save-btn">Save</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <%- include("../partials/user/footer") %>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Modal functionality for Add Address
            const addModal = document.getElementById('addressModal');
            const openAddModalBtn = document.getElementById('openAddressModal');
            const closeAddModalBtn = document.getElementById('closeAddressModal');
            const addAddressForm = document.getElementById('addAddressForm')
            const editAddressForm = document.getElementById('editAddressForm')
            addAddressForm.addEventListener('submit',validateAddForm)
            editAddressForm.addEventListener('submit',validateEditForm)

            if (openAddModalBtn && addModal && closeAddModalBtn) {
                openAddModalBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    addModal.classList.add('show');
                    document.body.style.overflow = 'hidden';
                });

                closeAddModalBtn.addEventListener('click', function() {
                    addModal.classList.remove('show');
                    document.body.style.overflow = '';
                    document.querySelectorAll('#addAddressForm .error-message').forEach(function(error) {
                        if (error) error.textContent = '';
                    });
                    document.getElementById('addAddressForm').reset();
                });
            }

            // Modal functionality for Edit Address
            const editModal = document.getElementById('editAddressModal');
            const closeEditModalBtn = document.getElementById('closeEditAddressModal');

            if (editModal && closeEditModalBtn) {
                closeEditModalBtn.addEventListener('click', function() {
                    editModal.classList.remove('show');
                    document.body.style.overflow = '';
                    document.querySelectorAll('#editAddressForm .error-message').forEach(function(error) {
                        if (error) error.textContent = '';
                    });
                });
            }

            // Close modals on outside click
            window.addEventListener('click', function(e) {
                if (e.target === addModal || e.target === editModal) {
                    addModal.classList.remove('show');
                    editModal.classList.remove('show');
                    document.body.style.overflow = '';
                    document.querySelectorAll('.error-message').forEach(function(error) {
                        if (error) error.textContent = '';
                    });
                    document.getElementById('addAddressForm').reset();
                }
            });

            // Regex patterns
            const nameRegex = /^[a-zA-Z\s]{2,50}$/;
            const phoneRegex = /^\d{10}$/;
            const pincodeRegex = /^\d{6}$/;
            const textRegex = /^[a-zA-Z\s]{2,100}$/;

            // Real-time validation for Add Address Form
            function validateAddField(fieldId, value) {
                const errorElement = document.getElementById(fieldId + 'Error');
                if (!errorElement) return false;

                let errorMessage = '';

                switch (fieldId) {
                    case 'addAddressType':
                        if (!['Home', 'Work', 'Other'].includes(value)) {
                            errorMessage = 'Please select a valid address type';
                        }
                        break;
                    case 'addFullName':
                        if (!value) {
                            errorMessage = 'Please enter full name';
                        } else if (!nameRegex.test(value)) {
                            errorMessage = 'Name must be 2-50 letters or spaces';
                        }
                        break;
                    case 'addMobileNo':
                        if (!value) {
                            errorMessage = 'Please enter mobile number';
                        } else if (!phoneRegex.test(value)) {
                            errorMessage = 'Mobile number must be 10 digits';
                        }
                        break;
                    case 'addAltPhone':
                        if (value && !phoneRegex.test(value)) {
                            errorMessage = 'Alternate phone must be 10 digits or empty';
                        }
                        break;
                    case 'addLandMark':
                        if (!value) {
                            errorMessage = 'Please enter landmark';
                        } else if (!textRegex.test(value)) {
                            errorMessage = 'Landmark must be 2-100 letters or spaces';
                        }
                        break;
                    case 'addCity':
                        if (!value) {
                            errorMessage = 'Please enter city';
                        } else if (!textRegex.test(value)) {
                            errorMessage = 'City must be 2-100 letters or spaces';
                        }
                        break;
                    case 'addPincode':
                        if (!value) {
                            errorMessage = 'Please enter pincode';
                        } else if (!pincodeRegex.test(value)) {
                            errorMessage = 'Pincode must be 6 digits';
                        }
                        break;
                    case 'addState':
                        if (!value) {
                            errorMessage = 'Please enter state';
                        } else if (!textRegex.test(value)) {
                            errorMessage = 'State must be 2-100 letters or spaces';
                        }
                        break;
                }

                errorElement.textContent = errorMessage;
                return !errorMessage;
            }

            // Real-time validation for Edit Address Form
            function validateEditField(fieldId, value) {
                const errorElement = document.getElementById(fieldId + 'Error');
                if (!errorElement) return false;

                let errorMessage = '';

                switch (fieldId) {
                    case 'editAddressType':
                        if (!['Home', 'Work', 'Other'].includes(value)) {
                            errorMessage = 'Please select a valid address type';
                        }
                        break;
                    case 'editFullName':
                        if (!value) {
                            errorMessage = 'Please enter full name';
                        } else if (!nameRegex.test(value)) {
                            errorMessage = 'Name must be 2-50 letters or spaces';
                        }
                        break;
                    case 'editMobileNo':
                        if (!value) {
                            errorMessage = 'Please enter mobile number';
                        } else if (!phoneRegex.test(value)) {
                            errorMessage = 'Mobile number must be 10 digits';
                        }
                        break;
                    case 'editAltPhone':
                        if (value && !phoneRegex.test(value)) {
                            errorMessage = 'Alternate phone must be 10 digits or empty';
                        }
                        break;
                    case 'editLandMark':
                        if (!value) {
                            errorMessage = 'Please enter landmark';
                        } else if (!textRegex.test(value)) {
                            errorMessage = 'Landmark must be 2-100 letters or spaces';
                        }
                        break;
                    case 'editCity':
                        if (!value) {
                            errorMessage = 'Please enter city';
                        } else if (!textRegex.test(value)) {
                            errorMessage = 'City must be 2-100 letters or spaces';
                        }
                        break;
                    case 'editPincode':
                        if (!value) {
                            errorMessage = 'Please enter pincode';
                        } else if (!pincodeRegex.test(value)) {
                            errorMessage = 'Pincode must be 6 digits';
                        }
                        break;
                    case 'editState':
                        if (!value) {
                            errorMessage = 'Please enter state';
                        } else if (!textRegex.test(value)) {
                            errorMessage = 'State must be 2-100 letters or spaces';
                        }
                        break;
                }

                errorElement.textContent = errorMessage;
                return !errorMessage;
            }

            // Attach real-time validation to Add Address Form
            const addAddressType = document.getElementById('addAddressType');
            const addFullName = document.getElementById('addFullName');
            const addMobileNo = document.getElementById('addMobileNo');
            const addAltPhone = document.getElementById('addAltPhone');
            const addLandMark = document.getElementById('addLandMark');
            const addCity = document.getElementById('addCity');
            const addPincode = document.getElementById('addPincode');
            const addState = document.getElementById('addState');

            if (addAddressType) addAddressType.addEventListener('input', function() {
                validateAddField('addAddressType', addAddressType.value ? addAddressType.value.trim() : '');
            });
            if (addFullName) addFullName.addEventListener('input', function() {
                validateAddField('addFullName', addFullName.value ? addFullName.value.trim() : '');
            });
            if (addMobileNo) addMobileNo.addEventListener('input', function() {
                validateAddField('addMobileNo', addMobileNo.value ? addMobileNo.value.trim() : '');
            });
            if (addAltPhone) addAltPhone.addEventListener('input', function() {
                validateAddField('addAltPhone', addAltPhone.value ? addAltPhone.value.trim() : '');
            });
            if (addLandMark) addLandMark.addEventListener('input', function() {
                validateAddField('addLandMark', addLandMark.value ? addLandMark.value.trim() : '');
            });
            if (addCity) addCity.addEventListener('input', function() {
                validateAddField('addCity', addCity.value ? addCity.value.trim() : '');
            });
            if (addPincode) addPincode.addEventListener('input', function() {
                validateAddField('addPincode', addPincode.value ? addPincode.value.trim() : '');
            });
            if (addState) addState.addEventListener('input', function() {
                validateAddField('addState', addState.value ? addState.value.trim() : '');
            });

            // Attach real-time validation to Edit Address Form
            const editAddressType = document.getElementById('editAddressType');
            const editFullName = document.getElementById('editFullName');
            const editMobileNo = document.getElementById('editMobileNo');
            const editAltPhone = document.getElementById('editAltPhone');
            const editLandMark = document.getElementById('editLandMark');
            const editCity = document.getElementById('editCity');
            const editPincode = document.getElementById('editPincode');
            const editState = document.getElementById('editState');

            if (editAddressType) editAddressType.addEventListener('input', function() {
                validateEditField('editAddressType', editAddressType.value ? editAddressType.value.trim() : '');
            });
            if (editFullName) editFullName.addEventListener('input', function() {
                validateEditField('editFullName', editFullName.value ? editFullName.value.trim() : '');
            });
            if (editMobileNo) editMobileNo.addEventListener('input', function() {
                validateEditField('editMobileNo', editMobileNo.value ? editMobileNo.value.trim() : '');
            });
            if (editAltPhone) editAltPhone.addEventListener('input', function() {
                validateEditField('editAltPhone', editAltPhone.value ? editAltPhone.value.trim() : '');
            });
            if (editLandMark) editLandMark.addEventListener('input', function() {
                validateEditField('editLandMark', editLandMark.value ? editLandMark.value.trim() : '');
            });
            if (editCity) editCity.addEventListener('input', function() {
                validateEditField('editCity', editCity.value ? editCity.value.trim() : '');
            });
            if (editPincode) editPincode.addEventListener('input', function() {
                validateEditField('editPincode', editPincode.value ? editPincode.value.trim() : '');
            });
            if (editState) editState.addEventListener('input', function() {
                validateEditField('editState', editState.value ? editState.value.trim() : '');
            });

            // Validation for Add Address Form on Submit
            function validateAddForm(event) {
                event.preventDefault();
                console.log('validateAddForm called');

                let isValid = true;

                const fields = [
                    { id: 'addAddressType', value: addAddressType ? addAddressType.value.trim() : '' },
                    { id: 'addFullName', value: addFullName ? addFullName.value.trim() : '' },
                    { id: 'addMobileNo', value: addMobileNo ? addMobileNo.value.trim() : '' },
                    { id: 'addAltPhone', value: addAltPhone ? addAltPhone.value.trim() : '' },
                    { id: 'addLandMark', value: addLandMark ? addLandMark.value.trim() : '' },
                    { id: 'addCity', value: addCity ? addCity.value.trim() : '' },
                    { id: 'addPincode', value: addPincode ? addPincode.value.trim() : '' },
                    { id: 'addState', value: addState ? addState.value.trim() : '' }
                ];

                fields.forEach(function(field) {
                    if (!validateAddField(field.id, field.value)) {
                        isValid = false;
                    }
                });

                console.log('Form validation result:', isValid);
                if (isValid) {
                    console.log('Submitting form to /add-address');
                    const addressType = document.getElementById('addAddressType').value;
                        const name = document.getElementById('addFullName').value;
                        const phone = document.getElementById('addMobileNo').value;
                        const altPhone = document.getElementById('addAltPhone').value;
                        const landMark = document.getElementById('addLandMark').value;
                        const city = document.getElementById('addCity').value;
                        const pincode = document.getElementById('addPincode').value;
                        const state = document.getElementById('addState').value;

                        // Create an object with all the values
                        const formData = {
                            addressType,
                            name,
                            phone,
                            altPhone,
                            landMark,
                            city,
                            pincode,
                            state
                        };
                        console.log(formData,'data')
                    fetch('/add-address', {
                        method: 'POST',
                        headers: {
                      'Content-Type': 'application/json'
                       },
                        body:JSON.stringify(formData) 
                    })
                    .then(function(response) {
                        console.log('Fetch response status:', response.status);
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error('Network response was not ok: ' + response.status + ' ' + text);
                            });
                        }
                        return response.json();
                    })
                    .then(function(result) {
                        console.log('Response JSON:', result);
                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Address Added',
                                text: 'Your new address has been added successfully',
                                timer: 1500,
                                showConfirmButton: false,
                                width: '400px',
                                customClass: {
                                    popup: 'custom-swal',
                                    title: 'custom-swal-title',
                                    content: 'custom-swal-content'
                                }
                            }).then(function() {
                                addModal.classList.remove('show');
                                document.body.style.overflow = '';
                                document.getElementById('addAddressForm').reset();
                                document.querySelectorAll('#addAddressForm .error-message').forEach(function(error) {
                                    if (error) error.textContent = '';
                                });
                                console.log('Redirecting to /addresses');
                                window.location.href = '/addresses';
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: result.message || 'Failed to add address',
                                confirmButtonText: 'OK',
                                width: '400px',
                                customClass: {
                                    popup: 'custom-swal',
                                    title: 'custom-swal-title',
                                    content: 'custom-swal-content'
                                }
                            });
                        }
                    })
                    .catch(function(error) {
                        console.error('Fetch error:', error.message);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred: ' + error.message,
                            confirmButtonText: 'OK',
                            width: '400px',
                            customClass: {
                                popup: 'custom-swal',
                                title: 'custom-swal-title',
                                content: 'custom-swal-content'
                            }
                        });
                    });
                }

                return false;
            }

            // Validation for Edit Address Form on Submit
            function validateEditForm(event) {
                event.preventDefault();
                console.log('validateEditForm called');

                let isValid = true;

                const fields = [
                    { id: 'editAddressType', value: editAddressType ? editAddressType.value.trim() : '' },
                    { id: 'editFullName', value: editFullName ? editFullName.value.trim() : '' },
                    { id: 'editMobileNo', value: editMobileNo ? editMobileNo.value.trim() : '' },
                    { id: 'editAltPhone', value: editAltPhone ? editAltPhone.value.trim() : '' },
                    { id: 'editLandMark', value: editLandMark ? editLandMark.value.trim() : '' },
                    { id: 'editCity', value: editCity ? editCity.value.trim() : '' },
                    { id: 'editPincode', value: editPincode ? editPincode.value.trim() : '' },
                    { id: 'editState', value: editState ? editState.value.trim() : '' }
                ];

                fields.forEach(function(field) {
                    if (!validateEditField(field.id, field.value)) {
                        isValid = false;
                    }
                });

                console.log('Form validation result:', isValid);
                if (isValid) {
                    console.log('Submitting form to /edit-address');
                    const formData = {
                    addressId: document.getElementById('editAddressId').value,
                    addressType: document.getElementById('editAddressType').value,
                    name: document.getElementById('editFullName').value,
                    phone: document.getElementById('editMobileNo').value,
                    altPhone: document.getElementById('editAltPhone').value,
                    landMark: document.getElementById('editLandMark').value,
                    city: document.getElementById('editCity').value,
                    pincode: document.getElementById('editPincode').value,
                    state: document.getElementById('editState').value
                };

                    fetch('/edit-address', {
                        method: 'POST',
                        headers: {
                      'Content-Type': 'application/json'
                       },
                        body: JSON.stringify(formData) 
                    }) 
                    .then(function(response) {
                        console.log('Fetch response status:', response.status);
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error('Network response was not ok: ' + response.status + ' ' + text);
                            });
                        }
                        return response.json();
                    })
                    .then(function(result) {
                        console.log('Response JSON:', result);
                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Address Updated',
                                text: 'Your address has been updated successfully',
                                timer: 1500,
                                showConfirmButton: false,
                                width: '400px',
                                customClass: {
                                    popup: 'custom-swal',
                                    title: 'custom-swal-title',
                                    content: 'custom-swal-content'
                                }
                            }).then(function() {
                                editModal.classList.remove('show');
                                document.body.style.overflow = '';
                                document.querySelectorAll('#editAddressForm .error-message').forEach(function(error) {
                                    if (error) error.textContent = '';
                                });
                                console.log('Redirecting to /addresses');
                                window.location.href = '/addresses';
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: result.message || 'Failed to update address',
                                confirmButtonText: 'OK',
                                width: '400px',
                                customClass: {
                                    popup: 'custom-swal',
                                    title: 'custom-swal-title',
                                    content: 'custom-swal-content'
                                }
                            });
                        }
                    })
                    .catch(function(error) {
                        console.error('Fetch error:', error.message);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred: ' + error.message,
                            confirmButtonText: 'OK',
                            width: '400px',
                            customClass: {
                                popup: 'custom-swal',
                                title: 'custom-swal-title',
                                content: 'custom-swal-content'
                            }
                        });
                    });
                }

                return false;
            }

            // Populate Edit Modal
            document.querySelectorAll('.edit-address').forEach(function(btn) {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    let address;
                    try {
                        address = JSON.parse(this.getAttribute('data-address'));
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to load address data. Please try again.',
                            confirmButtonText: 'OK',
                            width: '400px',
                            customClass: {
                                popup: 'custom-swal',
                                title: 'custom-swal-title',
                                content: 'custom-swal-content'
                            }
                        });
                        return;
                    }

                    const editAddressId = document.getElementById('editAddressId');
                    if (editAddressId) editAddressId.value = address._id || '';
                    if (editAddressType) editAddressType.value = address.addressType || 'Home';
                    if (editFullName) editFullName.value = address.name || '';
                    if (editMobileNo) editMobileNo.value = address.phone || '';
                    if (editAltPhone) editAltPhone.value = address.altPhone || '';
                    if (editLandMark) editLandMark.value = address.landMark || '';
                    if (editCity) editCity.value = address.city || '';
                    if (editPincode) editPincode.value = address.pincode || '';
                    if (editState) editState.value = address.State || '';

                    editModal.classList.add('show');
                    document.body.style.overflow = 'hidden';

                    if (editAddressType) validateEditField('editAddressType', editAddressType.value.trim());
                    if (editFullName) validateEditField('editFullName', editFullName.value.trim());
                    if (editMobileNo) validateEditField('editMobileNo', editMobileNo.value.trim());
                    if (editAltPhone) validateEditField('editAltPhone', editAltPhone.value.trim());
                    if (editLandMark) validateEditField('editLandMark', editLandMark.value.trim());
                    if (editCity) validateEditField('editCity', editCity.value.trim());
                    if (editPincode) validateEditField('editPincode', editPincode.value.trim());
                    if (editState) validateEditField('editState', editState.value.trim());
                });
            });

            // Handle Deliver Here button
            document.querySelectorAll('.deliver-btn').forEach(function(btn) {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const addressId = this.getAttribute('data-id');

                    Swal.fire({
                        icon: 'question',
                        title: 'Set Delivery Address',
                        text: 'Do you want to set this as your default delivery address?',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        width: '400px',
                        customClass: {
                            popup: 'custom-swal',
                            title: 'custom-swal-title',
                            content: 'custom-swal-content'
                        }
                    }).then(function(result) {
                        if (result.isConfirmed) {
                            fetch('/deliver-address', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ addressId: addressId })
                            })
                            .then(function(response) {
                                if (!response.ok) {
                                    return response.text().then(text => {
                                        throw new Error('Network response was not ok: ' + response.status + ' ' + text);
                                    });
                                }
                                return response.json();
                            })
                            .then(function(result) {
                                if (result.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Address Selected',
                                        text: 'This address is now set as your default delivery address',
                                        timer: 1500,
                                        showConfirmButton: false,
                                        width: '400px',
                                        customClass: {
                                            popup: 'custom-swal',
                                            title: 'custom-swal-title',
                                            content: 'custom-swal-content'
                                        }
                                    }).then(function() {
                                        window.location.href = '/addresses';
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: result.message || 'Failed to set delivery address',
                                        confirmButtonText: 'OK',
                                        width: '400px',
                                        customClass: {
                                            popup: 'custom-swal',
                                            title: 'custom-swal-title',
                                            content: 'custom-swal-content'
                                        }
                                    });
                                }
                            })
                            .catch(function(error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'An error occurred: ' + error.message,
                                    confirmButtonText: 'OK',
                                    width: '400px',
                                    customClass: {
                                        popup: 'custom-swal',
                                        title: 'custom-swal-title',
                                        content: 'custom-swal-content'
                                    }
                                });
                            });
                        }
                    });
                });
            });

            // Handle Delete Address
            document.querySelectorAll('.delete-address').forEach(function(btn) {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const addressId = this.getAttribute('data-id');

                    Swal.fire({
                        icon: 'question',
                        title: 'Delete Address',
                        text: 'Are you sure you want to delete this address?',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, Delete',
                        cancelButtonText: 'No',
                        width: '400px',
                        customClass: {
                            popup: 'custom-swal',
                            title: 'custom-swal-title',
                            content: 'custom-swal-content'
                        }
                    }).then(function(result) {
                        if (result.isConfirmed) {
                            fetch('/delete-address?id=' + addressId, {
                                method: 'GET'
                            })
                            .then(function(response) {
                                if (!response.ok) {
                                    return response.text().then(text => {
                                        throw new Error('Network response was not ok: ' + response.status + ' ' + text);
                                    });
                                }
                                return response.json();
                            })
                            .then(function(result) {
                                if (result.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Address Deleted',
                                        text: 'The address has been removed successfully',
                                        timer: 1500,
                                        showConfirmButton: false,
                                        width: '400px',
                                        customClass: {
                                            popup: 'custom-swal',
                                            title: 'custom-swal-title',
                                            content: 'custom-swal-content'
                                        }
                                    }).then(function() {
                                        window.location.href = '/addresses';
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: result.message || 'Failed to delete address',
                                        confirmButtonText: 'OK',
                                        width: '400px',
                                        customClass: {
                                            popup: 'custom-swal',
                                            title: 'custom-swal-title',
                                            content: 'custom-swal-content'
                                        }
                                    });
                                }
                            })
                            .catch(function(error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'An error occurred: ' + error.message,
                                    confirmButtonText: 'OK',
                                    width: '400px',
                                    customClass: {
                                        popup: 'custom-swal',
                                        title: 'custom-swal-title',
                                        content: 'custom-swal-content'
                                    }
                                });
                            });
                        }
                    });
                });
            });
        });
    </script>
</body>
</html>