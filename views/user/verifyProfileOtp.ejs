<%- include("../../views/partials/user/header") %>

<div class="verification-container">
  <div class="verification-card">
    <div class="card-header">
      <a href="/edit-profile" class="back-link">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M19 12H5M12 19l-7-7 7-7"/>
        </svg>
        Back to Profile
      </a>
      <h1>Verify Your Email</h1>
    </div>
    
    <div class="card-body">
      <div class="email-sent-icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
          <path d="M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h16a2 2 0 0 0 2-2v-4.5"/>
          <path d="m22 10-7.1 4.4c-1.3.8-2.9.8-4.2 0L4 10"/>
          <path d="M14 12a2 2 0 0 0 2-2"/>
          <path d="M14 8a2 2 0 1 1 0 4"/>
        </svg>
      </div>
      
      <p class="verification-message">We've sent a verification code to <strong><%= email %></strong></p>
      
      <div class="otp-input-group">
        <input type="text" id="otp-1" class="otp-input" maxlength="1" autofocus>
        <input type="text" id="otp-2" class="otp-input" maxlength="1">
        <input type="text" id="otp-3" class="otp-input" maxlength="1">
        <input type="text" id="otp-4" class="otp-input" maxlength="1">
        <input type="text" id="otp-5" class="otp-input" maxlength="1">
        <input type="text" id="otp-6" class="otp-input" maxlength="1">
      </div>
      
      <p class="timer-text">Code expires in <span id="countdown">01:00</span></p>
      
      <button id="verify-otp-btn" class="verify-button">
        Verify Email
      </button>
      
      <p id="otp-message" class="verification-status"></p>
      
      <div class="additional-actions">
        <p>Didn't receive the code? <a href="#" id="resend-otp" class="resend-link">Resend Code</a></p>
      </div>
    </div>
  </div>
</div>

<%- include('../../views/partials/user/footer') %>

<style>
  :root {
    --primary-color: #4361ee;
    --primary-hover: #3a56d4;
    --text-color: #333;
    --text-secondary: #6b7280;
    --background: #f9fafb;
    --card-bg: #ffffff;
    --border-color: #e5e7eb;
    --success-color: #10b981;
    --error-color: #ef4444;
    --shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  body {
    margin: 0;
    padding: 0;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    background-color: var(--background);
    color: var(--text-color);
    line-height: 1.5;
  }

  .verification-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - 120px);
    padding: 2rem;
  }

  .verification-card {
    background-color: var(--card-bg);
    border-radius: 12px;
    box-shadow: var(--shadow);
    width: 100%;
    max-width: 480px;
    overflow: hidden;
  }

  .card-header {
    padding: 1.5rem 2rem;
    border-bottom: 1px solid var(--border-color);
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    margin-bottom: 1rem;
    transition: color 0.2s ease;
  }

  .back-link svg {
    margin-right: 0.5rem;
  }

  .back-link:hover {
    color: var(--primary-color);
  }

  .card-header h1 {
    font-size: 1.5rem;
    margin: 0;
    font-weight: 600;
    color: var(--text-color);
  }

  .card-body {
    padding: 2rem;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .email-sent-icon {
    color: var(--primary-color);
    margin-bottom: 1.5rem;
  }

  .verification-message {
    text-align: center;
    margin-bottom: 1.5rem;
    color: var(--text-secondary);
  }

  .verification-message strong {
    color: var(--text-color);
  }

  .otp-input-group {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin-bottom: 1.5rem;
  }

  .otp-input {
    width: 50px;
    height: 50px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    text-align: center;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-color);
    transition: all 0.2s ease;
  }

  .otp-input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
    outline: none;
  }

  .timer-text {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-bottom: 1.5rem;
  }

  .verify-button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 0.875rem 1.5rem;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    width: 100%;
    transition: background-color 0.2s ease;
  }

  .verify-button:hover:not(:disabled) {
    background-color: var(--primary-hover);
  }

  .verify-button:disabled {
    background-color: #9ca3af;
    cursor: not-allowed;
  }

  .verification-status {
    margin: 1rem 0;
    font-size: 0.9rem;
    min-height: 20px;
  }

  .verification-status.success {
    color: var(--success-color);
  }

  .verification-status.error {
    color: var(--error-color);
  }

  .additional-actions {
    margin-top: 1rem;
    text-align: center;
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .resend-link {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 500;
    pointer-events: none;
    opacity: 0.5;
    transition: opacity 0.2s ease;
  }

  .resend-link.enabled {
    pointer-events: auto;
    opacity: 1;
  }

  .resend-link.enabled:hover {
    text-decoration: underline;
  }

  /* When OTP inputs are filled correctly */
  .otp-input.valid {
    border-color: var(--success-color);
    background-color: rgba(16, 185, 129, 0.05);
  }

  /* When OTP inputs have errors */
  .otp-input.error {
    border-color: var(--error-color);
    background-color: rgba(239, 68, 68, 0.05);
  }

  /* Responsive design */
  @media (max-width: 576px) {
    .verification-container {
      padding: 1rem;
    }

    .card-header, .card-body {
      padding: 1.5rem;
    }

    .otp-input {
      width: 40px;
      height: 40px;
    }

    .otp-input-group {
      gap: 6px;
    }
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get email from URL query parameter
    const urlParams = new URLSearchParams(window.location.search);
    const email = urlParams.get('email');
    
    // OTP input handling
    const otpInputs = document.querySelectorAll('.otp-input');
    const verifyBtn = document.getElementById('verify-otp-btn');
    const otpMessage = document.getElementById('otp-message');
    const resendBtn = document.getElementById('resend-otp');
    
    // Focus handling for OTP inputs
    otpInputs.forEach((input, index) => {
      // Auto-focus on first input
      if (index === 0) input.focus();
      
      input.addEventListener('keyup', function(e) {
        // Move to next input after entering a digit
        if (this.value.length === 1 && index < otpInputs.length - 1) {
          otpInputs[index + 1].focus();
        }
        
        // Handle backspace
        if (e.key === 'Backspace' && index > 0 && this.value.length === 0) {
          otpInputs[index - 1].focus();
        }
        
        // Enable verify button when all fields are filled
        checkAllInputs();
      });
      
      // Ensure only numbers
      input.addEventListener('input', function() {
        this.value = this.value.replace(/[^0-9]/g, '');
      });
      
      // Handle paste event
      input.addEventListener('paste', function(e) {
        e.preventDefault();
        const pastedData = e.clipboardData.getData('text').trim();
        
        if (/^\d+$/.test(pastedData) && pastedData.length <= otpInputs.length) {
          for (let i = 0; i < pastedData.length; i++) {
            if (index + i < otpInputs.length) {
              otpInputs[index + i].value = pastedData[i];
            }
          }
          
          // Focus on the appropriate input after paste
          const focusIndex = Math.min(index + pastedData.length, otpInputs.length - 1);
          otpInputs[focusIndex].focus();
          
          checkAllInputs();
        }
      });
    });
    
    // Check if all inputs are filled
    function checkAllInputs() {
      let allFilled = true;
      let otpValue = '';
      
      otpInputs.forEach(input => {
        if (!input.value) {
          allFilled = false;
        }
        otpValue += input.value;
      });
      
      // Only enable verify button if all inputs are filled and OTP is not expired
      if (allFilled && !isExpired) {
        verifyBtn.disabled = false;
      } else {
        verifyBtn.disabled = true;
      }
    }
    
    // Countdown timer
    let timeLeft = 60; // 1 minute in seconds
    let isExpired = false;
    const countdownEl = document.getElementById('countdown');
    
    function updateCountdown() {
      const minutes = Math.floor(timeLeft / 60);
      const seconds = timeLeft % 60;
      countdownEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      
      if (timeLeft === 0) {
        clearInterval(countdownInterval);
        isExpired = true;
        verifyBtn.disabled = true;
        verifyBtn.style.backgroundColor = '#9ca3af';
        resendBtn.classList.add('enabled'); // Enable resend link
        otpMessage.textContent = 'OTP has expired. Please resend a new code.';
        otpMessage.className = 'verification-status error';
      } else {
        timeLeft--;
      }
    }
    
    const countdownInterval = setInterval(updateCountdown, 1000);
    updateCountdown();
    
    // Resend button handling
    resendBtn.addEventListener('click', async function(e) {
      e.preventDefault();
      
      if (!isExpired) return; // Prevent resend before expiration
      
      // Disable resend link during API call
      resendBtn.classList.remove('enabled');
      otpMessage.textContent = 'Sending new verification code...';
      otpMessage.className = 'verification-status';
      
      try {
        const response = await fetch('/resend-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email }),
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Reset inputs
          otpInputs.forEach(input => {
            input.value = '';
            input.classList.remove('valid', 'error');
          });
          otpInputs[0].focus();
          
          // Reset timer and state
          timeLeft = 60;
          isExpired = false;
          verifyBtn.disabled = false;
          verifyBtn.style.backgroundColor = 'var(--primary-color)';
          resendBtn.classList.remove('enabled'); // Disable resend link again
          clearInterval(countdownInterval);
          const newCountdownInterval = setInterval(updateCountdown, 1000);
          
          // Show success message
          otpMessage.textContent = 'A new verification code has been sent!';
          otpMessage.className = 'verification-status success';
          
          // Hide message after 3 seconds
          setTimeout(() => {
            otpMessage.textContent = '';
            otpMessage.className = 'verification-status';
          }, 3000);
        } else {
          otpMessage.textContent = result.message || 'Failed to resend OTP.';
          otpMessage.className = 'verification-status error';
          resendBtn.classList.add('enabled'); // Re-enable resend link on failure
        }
      } catch (error) {
        console.error('Error resending OTP:', error);
        otpMessage.textContent = 'An error occurred while resending OTP.';
        otpMessage.className = 'verification-status error';
        resendBtn.classList.add('enabled'); // Re-enable resend link on error
      }
    });
    
    // Verify button handling
    verifyBtn.addEventListener('click', async function() {
      if (isExpired) {
        await Swal.fire({
          icon: 'error',
          title: 'OTP Expired',
          text: 'The OTP has expired. Please resend a new code.',
          confirmButtonText: 'OK',
          width: '400px'
        });
        return;
      }
      
      let otpValue = '';
      otpInputs.forEach(input => {
        otpValue += input.value;
      });
      
      if (otpValue.length !== 6 || !/^\d+$/.test(otpValue)) {
        otpInputs.forEach(input => {
          if (!input.value) {
            input.classList.add('error');
          }
        });
        
        otpMessage.textContent = 'Please enter all six digits of your verification code';
        otpMessage.className = 'verification-status error';
        return;
      }
      
      // Show verification in progress
      verifyBtn.disabled = true;
      verifyBtn.textContent = 'Verifying...';
      otpMessage.textContent = 'Verifying your email...';
      otpMessage.className = 'verification-status';
      
      try {
        // API call to verify OTP
        const response = await fetch('/verify-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email, otp: otpValue }),
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Show success state
          otpInputs.forEach(input => {
            input.classList.add('valid');
            input.classList.remove('error');
          });
          
          // Update button to show success
          verifyBtn.textContent = 'Verified Successfully';
          verifyBtn.style.backgroundColor = 'var(--success-color)';
          
          // Show SweetAlert success message
          await Swal.fire({
            title: 'Success!',
            text: 'Email Verified Successfully',
            icon: 'success',
            confirmButtonText: 'OK',
            width: '400px'
          });
          
          // Redirect to userProfile.ejs
          window.location.href = '/userProfile';
        } else {
          // Show error state
          otpInputs.forEach(input => {
            input.classList.add('error');
            input.classList.remove('valid');
          });
          
          otpMessage.textContent = result.message || 'Invalid verification code. Please try again.';
          otpMessage.className = 'verification-status error';
          
          // Reset button
          verifyBtn.disabled = isExpired;
          verifyBtn.textContent = 'Verify Email';
          verifyBtn.style.backgroundColor = isExpired ? '#9ca3af' : 'var(--primary-color)';
        }
      } catch (error) {
        console.error('Error verifying OTP:', error);
        otpMessage.textContent = 'Connection error. Please try again.';
        otpMessage.className = 'verification-status error';
        
        // Reset button
        verifyBtn.disabled = isExpired;
        verifyBtn.textContent = 'Verify Email';
        verifyBtn.style.backgroundColor = isExpired ? '#9ca3af' : 'var(--primary-color)';
      }
    });
  });
</script>